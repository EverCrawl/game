// Generated by packetc v0.3.4 at Sat, 27 Feb 2021 15:47:51 +0000
import { Reader, Writer } from "packet";
export namespace Move {
    export interface Entity {
        id: number,
        cstate: number,
        x: number,
        y: number,
    }
}
export class Move {
    constructor(
        public entities: Move.Entity[],
    ) {}
    static read(data: ArrayBuffer): Move | null {
        let reader = new Reader(data);
        let output = Object.create(Move);
        let output_entities_len = reader.read_uint32();
        output.entities = new Array(output_entities_len);
        for (let output_entities_index = 0; output_entities_index < output_entities_len; ++output_entities_index) {
            let output_entities_item: any = {};
            output_entities_item.id = reader.read_uint32();
            output_entities_item.cstate = reader.read_uint8();
            output_entities_item.x = reader.read_float();
            output_entities_item.y = reader.read_float();
            output.entities[output_entities_index] = output_entities_item;
        }
        if (reader.failed) return null;
        return output;
    }
    write(buffer?: ArrayBuffer): ArrayBuffer {
        let writer = buffer ? new Writer(buffer) : new Writer();
        writer.write_uint32(this.entities.length);
        for (let this_entities_index = 0; this_entities_index < this.entities.length; ++this_entities_index) {
            let this_entities_item = this.entities[this_entities_index];
            writer.write_uint32(this_entities_item.id);
            writer.write_uint8(this_entities_item.cstate);
            writer.write_float(this_entities_item.x);
            writer.write_float(this_entities_item.y);
        }
        return writer.finish();
    }
}
