// Generated by packetc v0.2.3 at Thu, 11 Feb 2021 18:03:33 +0000
#![allow(dead_code, non_camel_case_types, unused_imports, clippy::field_reassign_with_default)]
use std::convert::TryFrom;
#[derive(Clone, PartialEq, Debug, Default)]
pub struct Input {
    pub action: Action,
}
#[derive(Clone, Copy, PartialEq, Debug)]
#[repr(u8)]
pub enum Action {
    MoveLeft = 1 << 0,
    MoveRight = 1 << 1,
    MoveUp = 1 << 2,
    MoveDown = 1 << 3,
    Jump = 1 << 4,
    LetGo = 1 << 5,
}
impl Default for Action {
    fn default() -> Self {
        Action::MoveLeft
    }
}
impl std::convert::TryFrom<u8> for Action {
    type Error = packet::Error;
    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            1 => Ok(Action::MoveLeft),
            2 => Ok(Action::MoveRight),
            4 => Ok(Action::MoveUp),
            8 => Ok(Action::MoveDown),
            16 => Ok(Action::Jump),
            32 => Ok(Action::LetGo),
            _ => Err(packet::Error::InvalidEnumValue(value as usize, "Action"))
        }
    }
}
pub fn read(reader: &mut packet::reader::Reader, output: &mut Input) -> Result<(), packet::Error> {
    output.action = Action::try_from(reader.read_uint8()?)?;
    Ok(())
}
pub fn write(writer: &mut packet::writer::Writer, input: &Input) {
    writer.write_uint8(input.action as u8);
}
